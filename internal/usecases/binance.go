package usecases

import (
	"context"
	"fmt"
	"strings"
	"tg-crypto-bot/internal/adapters"
	"tg-crypto-bot/internal/interfaces"
	"time"
)

type CryptoUsecase interface {
	SendCurrentPrice(ctx context.Context, symbol string) error
	HandleUserMessage(ctx context.Context, message string, chatID int64) error
}

type cryptoUsecase struct {
	priceProvider interfaces.PriceProvider
	telegram      *adapters.TelegramAdapter
}

func NewCryptoUsecase(pp interfaces.PriceProvider, tg *adapters.TelegramAdapter) CryptoUsecase {
	return &cryptoUsecase{
		priceProvider: pp,
		telegram:      tg,
	}
}

func (c *cryptoUsecase) SendCurrentPrice(ctx context.Context, symbol string) error {
	price, err := c.priceProvider.GetPrice(symbol)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã –æ—Ç Binance –¥–ª—è %s: %w", symbol, err)
	}

	message := fmt.Sprintf("–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ %s: %.4f", symbol, price)

	if err := c.telegram.SendMessage(ctx, message); err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: %w", err)
	}
	return nil
}

func (c *cryptoUsecase) HandleUserMessage(ctx context.Context, message string, chatID int64) error {
	// –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ –≤–µ—Ä—Ö–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
	symbol := strings.TrimSpace(strings.ToUpper(message))

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Ç–æ—Ä–≥–æ–≤—É—é	 –ø–∞—Ä—É
	if !strings.Contains(symbol, "USDT") && !strings.Contains(symbol, "BTC") && !strings.Contains(symbol, "ETH") {
		helpMsg := `–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å–∏–º–≤–æ–ª –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã.

–ü—Ä–∏–º–µ—Ä—ã:
‚Ä¢ BTCUSDT - —Ü–µ–Ω–∞ Bitcoin
‚Ä¢ ETHUSDT - —Ü–µ–Ω–∞ Ethereum  
‚Ä¢ ADAUSDT - —Ü–µ–Ω–∞ Cardano
‚Ä¢ DOTUSDT - —Ü–µ–Ω–∞ Polkadot
`

		return c.telegram.SendMessageToChat(ctx, helpMsg, chatID)
	}

	// –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç–æ–ª—å–∫–æ —Å–∏–º–≤–æ–ª –±–µ–∑ USDT, –¥–æ–±–∞–≤–ª—è–µ–º USDT
	if !strings.HasSuffix(symbol, "USDT") && len(symbol) <= 5 {
		symbol = symbol + "USDT"
	}

	// –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É
	price, err := c.priceProvider.GetPrice(symbol)
	if err != nil {
		errorMsg := fmt.Sprintf("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –¥–ª—è %s: %v", symbol, err)
		return c.telegram.SendMessageToChat(ctx, errorMsg, chatID)
	}

	// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ü–µ–Ω–æ–π
	priceMsg := fmt.Sprintf(
		"üí∞ %s\nüíµ –¶–µ–Ω–∞: %.2f USDT\n‚åö –í—Ä–µ–º—è: %s\nüè¶ –ò—Å—Ç–æ—á–Ω–∏–∫: Binance",
		symbol,
		price,
		time.Now().Format("15:04:05"),
	)

	return c.telegram.SendMessageToChat(ctx, priceMsg, chatID)
}
